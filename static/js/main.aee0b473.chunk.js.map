{"version":3,"sources":["components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","humidity","pressure","wind","speed","Forecast","useState","city","setCity","unit","setUnit","clean","setClean","setError","setLoading","encodeURIComponent","setResponseObj","onSubmit","e","preventDefault","length","uriEncodedCity","fetch","process","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","textInput","value","onChange","target","Radio","checked","Button","ResetButton","id","hidden","onClick","Conditions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee0b473.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Forecast_TextInput__2ur0J\",\"Radio\":\"Forecast_Radio__1Ejlt\",\"Button\":\"Forecast_Button__3Y_IL\",\"ResetButton\":\"Forecast_ResetButton__3keX6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\",\"Loader\":\"Conditions_Loader__PcSFJ\",\"spin\":\"Conditions_spin__b05Or\"};","import React from 'react';\nimport classes from './Conditions.module.css'\nconst conditions = (props) => {\n   return (\n       <div className={classes.Wrapper}>\n           {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\n\n           {props.loading && <div className={classes.Loader} ></div>}\n           {props.responseObj.cod === 200 ?\n               <div>\n                   <p>City: <strong>{props.responseObj.name}</strong></p>\n                   <p>Temperature: <strong>{Math.round(props.responseObj.main.temp)} degrees</strong> </p>\n                   <p>Weather conditions: <strong>{props.responseObj.weather[0].description}</strong></p>\n                   <p>Humidity: <strong>{props.responseObj.main.humidity}</strong></p>\n                   <p>Pressure: <strong>{props.responseObj.main.pressure} hPa </strong></p>\n                   <p>Wind speed: <strong>{props.responseObj.wind.speed} m/s </strong></p>\n               </div>\n           : null\n           }\n       </div>\n   )\n}\nexport default conditions;","import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\n\nconst Forecast = () => {\nlet [city, setCity] = useState('');\nlet [unit, setUnit] = useState('imperial');\nlet [clean, setClean] = useState(true);\n// error handling\nlet [error, setError] = useState(false);\nlet [loading, setLoading] = useState(false);\n    \n    // converts input to string\nconst uriEncodedCity = encodeURIComponent(city);\n\n    // destructing - when wrapped in an array\nlet [responseObj, setResponseObj] = useState({});\n\nfunction resetForm(e) {\n    e.preventDefault();\n    setCity('');\n    setUnit('imperial');\n    setResponseObj({});\n    setClean(true);\n}\n\nfunction getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n        return setError(true);\n    }\n    // Clear state in preparation for new data\n    setError(false);\n    setResponseObj({});\n   \n    setLoading(true);\n   \n    let uriEncodedCity = encodeURIComponent(city);\n fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n            \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`\n        }\n    })\n    .then(response => response.json())\n    .then(response => {\n        if (response.cod !== 200) {\n            throw new Error()\n        }\n        setResponseObj(response);\n        setLoading(false);\n        setClean(false);\n    })\n    .catch(err => {\n        setError(true);\n        setLoading(false);\n      //  setClean(false);\n        console.log(err.message);\n    });\n }\n   \n   return (\n    <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n            <input  \n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                 <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n                <button className={classes.ResetButton} \n                        id=\"reset\"\n                        hidden={clean}\n                        onClick={resetForm}\n                        type=\"button\">Reset</button>\n            </form>\n           <Conditions\n           \n                responseObj={responseObj}\n                error={error} //new\n                loading={loading} \n               />\n       </div>\n   )\n   \n}\n\n\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Weather App</h1>\n      </header>\n      <main>\n        <Forecast />\n      </main>\n      <footer>Page created by Yana Kryshchuk</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}